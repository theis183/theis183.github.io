{"version":3,"sources":["components/Card/index.js","components/Counter/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","clickPlaneswalker","name","src","img","alt","Counter","score","hiScore","App","state","planeswalkers","clicked","planeswalker","console","log","_this","includes","setState","tempHiScore","Math","max","concat","shuffle","i","length","j","floor","random","_ref","_this2","this","components_Counter","map","components_Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"20CAceA,MAXf,SAAcC,GACZ,OACFC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,kBAAkBN,EAAMO,QACjEN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,IAAKL,UAAU,eAAeM,IAAI,QAClDT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBCCFO,MAPf,SAAiBX,GACb,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBAAYH,EAAMY,MAAlB,cAAoCZ,EAAMa,WCyDvCC,6MAvDbC,MAAQ,CACNC,gBACAJ,MAAO,EACPC,QAAS,EACTI,QAAS,MAGXX,kBAAoB,SAACY,GAEnB,GADAC,QAAQC,IAAI,eACTC,EAAKN,MAAME,QAAQK,SAASJ,GAC7BG,EAAKE,SAAS,CACZX,MAAO,EACPK,QAAS,SAGT,CACF,IAAMO,EAAcC,KAAKC,IAAIL,EAAKN,MAAMH,MAAQ,EAAGS,EAAKN,MAAMF,SAC9DQ,EAAKE,SAAS,CACZX,MAAOS,EAAKN,MAAMH,MAAQ,EAC1BK,QAASI,EAAKN,MAAME,QAAQU,OAAO,CAACT,IACpCL,QAASW,IAGbH,EAAKO,aAGLA,QAAU,WAER,IADA,IAAI1B,EAAImB,EAAKN,MAAMC,cACVa,EAAI3B,EAAE4B,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIN,KAAKO,MAAMP,KAAKQ,UAAYJ,EAAI,IADPK,EAEpB,CAAChC,EAAE6B,GAAI7B,EAAE2B,IAAvB3B,EAAE2B,GAFgCK,EAAA,GAE5BhC,EAAE6B,GAF0BG,EAAA,GAIvCb,EAAKE,SAAS,CACZP,cAAed,6EAKb,IAAAiC,EAAAC,KACJ,OACEnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACkC,EAAD,CAASzB,MAAOwB,KAAKrB,MAAMH,MAAOC,QAASuB,KAAKrB,MAAMF,UACrDuB,KAAKrB,MAAMC,cAAcsB,IAAI,SAAApB,GAAY,OAC5CjB,EAAAC,EAAAC,cAACoC,EAAD,CACA9B,IAAKS,EAAaT,IAClBF,KAAMW,EAAaX,KACnBD,kBAAmB6B,EAAK7B,8BA/CZkC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ae647586.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './style.css'\r\n\r\nfunction Card(props){\r\n  return(\r\n<div className=\"card\" onClick={() => props.clickPlaneswalker(props.name)}>\r\n  <img src={props.img} className=\"card-img-top\" alt=\"...\"/>\r\n  <div className=\"card-body\">\r\n    <p className=\"card-text\"></p>\r\n  </div>\r\n</div>\r\n\r\n)}\r\n\r\nexport default Card","import React from \"react\";\r\n\r\nfunction Counter(props){\r\n    return(\r\n        <div>\r\n            <h3>Score: {props.score} Hi-Score: {props.hiScore}</h3>\r\n        </div>\r\n    )}\r\n\r\nexport default Counter","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './components/Card'\nimport planeswalkers from './planeswalkers.json'\nimport Counter from './components/Counter'\n\nclass App extends Component {\n  state = {\n    planeswalkers,\n    score: 0,\n    hiScore: 0,\n    clicked: []\n  }\n\n  clickPlaneswalker = (planeswalker) => {\n    console.log(\"Was clicked\")\n    if(this.state.clicked.includes(planeswalker)){\n      this.setState({\n        score: 0,\n        clicked: []\n      })\n    }\n    else{\n      const tempHiScore = Math.max(this.state.score + 1, this.state.hiScore)\n      this.setState({\n        score: this.state.score + 1,\n        clicked: this.state.clicked.concat([planeswalker]),\n        hiScore: tempHiScore\n      })\n    }\n    this.shuffle()\n  }\n\n    shuffle = () => {\n      let a = this.state.planeswalkers\n      for (let i = a.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          [a[i], a[j]] = [a[j], a[i]];\n      }\n      this.setState({\n        planeswalkers: a\n      })\n  }\n  \n\n  render(){\n      return (\n        <div className=\"App\">\n        <Counter score={this.state.score} hiScore={this.state.hiScore} ></Counter>\n        {this.state.planeswalkers.map(planeswalker =>\n      <Card \n      img={planeswalker.img}\n      name={planeswalker.name}\n      clickPlaneswalker={this.clickPlaneswalker}>\n      </Card>)}\n        </div>\n      );\n  \n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}